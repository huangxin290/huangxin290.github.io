(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{455:function(e,v,_){"use strict";_.r(v);var n=_(2),s=Object(n.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"出现场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#出现场景"}},[e._v("#")]),e._v(" 出现场景")]),e._v(" "),v("blockquote",[v("p",[e._v("legacy 是 "),v("code",[e._v("遗产")]),e._v(" 的意思，他告诉 npm 忽略各个依赖模块之间依赖相同但版本不同的问题，以过去的方式来安装依赖（即依赖会安装多次，但是版本不同，从而解决了版本冲突的问题）。")])]),e._v(" "),v("p",[e._v("在 npm install 的时候，经常会出现这个问题，"),v("strong",[e._v("依赖冲突")])]),e._v(" "),v("p",[e._v("首先要明白，在 package.json 中")]),e._v(" "),v("ul",[v("li",[e._v("dependencies 是开发环境和生产环境都需要的依赖")]),e._v(" "),v("li",[e._v("devDependencies 是仅在开发环境下依赖的模块")]),e._v(" "),v("li",[e._v("peerDependency 是对等依赖")])]),e._v(" "),v("p",[e._v("就好比 prettier 这个用于代码美化的插件，我只在开发环境，写代码的时候用到，所以可以通过 "),v("code",[e._v("npm install -D prettier")]),e._v(" 来下载。")]),e._v(" "),v("p",[e._v("而 peerDependency 就是依赖的子依赖存在重复的问题，比如项目依赖"),v("code",[e._v("插件A")]),e._v("，于此同时还依赖"),v("code",[e._v("插件B")]),e._v(" 和"),v("code",[e._v("插件C")]),e._v("，结果"),v("code",[e._v("插件B")]),e._v("和"),v("code",[e._v("插件C")]),e._v(" 的子依赖还包含了"),v("code",[e._v("插件A")]),e._v("。")]),e._v(" "),v("div",{staticClass:"language-bash extra-class"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[e._v("├── 项目\n│   └── node_modules\n│       ├── 插件A\n│       ├── 插件B\n│       │   └── nodule_modules\n│       │       └── 插件A\n│       └── 插件C\n│       │   └── nodule_modules\n│       │       └── 插件A\n")])])]),v("p",[e._v("这样就安装了三次 "),v("code",[e._v("插件A")]),e._v(" ，造成了安装冗余。")]),e._v(" "),v("p",[e._v("peerDependency 就解决了这个问题，只会安装一次 "),v("code",[e._v("插件A")]),e._v("。")]),e._v(" "),v("div",{staticClass:"language-bash extra-class"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[e._v("├── 项目\n│   └── node_modules\n│       ├── 插件A\n│       ├── 插件B\n│       └── 插件C\n")])])]),v("p",[e._v("npm 从版本 7 就开始支持这个特性了。这些插件是放在 node_modules 下面的，相当于根目录下面（你可以打开看一下，是以名字为文件夹名的，没有版本），但是这样就引入了新的问题，这三次 "),v("code",[e._v("插件A")]),e._v(" 可能版本不一致，就造成了依赖的版本冲突。")]),e._v(" "),v("p",[e._v("而 --legacy-peer-deps 参数告诉 npm 忽略各个依赖模块之间依赖相同但"),v("strong",[e._v("版本不同")]),e._v("的问题，以过去的方式"),v("code",[e._v("npm v3-v6")]),e._v("来安装依赖（即依赖会安装多次，但是版本不同，从而解决了版本冲突的问题）。")])])}),[],!1,null,null,null);v.default=s.exports}}]);